openapi: 3.0.0
info:
  title: Evira
  version: 1.0.0
  description: Evira E-commerce APIs with Swagger
  contact: { email: talaviyasanket01@gmail.com }
servers:
  - url: http://65.0.143.176/api/v1
  - url: http://localhost:8000/api/v1
components:
  securitySchemes:
    userAuth:
      type: http
      scheme: bearer
    adminAuth:
      type: http
      scheme: bearer
tags:
  - name: Auth
  - name: Users
  - name: Root
  - name: Notifications
  - name: Offers
  - name: Categories
  - name: Products
  - name: Reviews
  - name: Checkout
  - name: Orders
  - name: FAQs
  - name: Messages
  - name: Admin Root
  - name: Admin Users
  - name: Admin Categories
  - name: Admin Products
  - name: Admin Variants
  - name: Admin Reviews
  - name: Admin Offers
  - name: Admin Shipping
  - name: Admin Promotions
  - name: Admin Orders
  - name: Admin FAQs
  - name: Admin Messages
paths:
  /auth/register:
    post:
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
              example:
                email: example_user@gmail.com
                password: user1234
      responses:
        '200':
          description: Tokens Object
          content:
            application/json: {}
  /auth/login:
    post:
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string,
                  format: email
                password:
                  type: string
              required:
                - email
                - password
              example:
                email: user1@gmail.com
                password: user1234
      responses:
        '200':
          description: Tokens Object with isProfileCompleted flag
          content:
            application/json: {}
  /auth/forgot-password/email:
    post:
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
              example:
                email: user1@gmail.com
      responses:
        '200':
          description: Success response with reset Token
          content:
            application/json: {}
  /auth/verify-reset-otp:
    post:
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  format: token
                otp:
                  type: integer
                  format: otp
              required:
                - token
                - otp
              example:
                otp: 1234
                token: reset-token
      responses:
        '200':
          description: Success response
          content:
            application/json: {}
  /auth/reset-password:
    put:
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  format: token
                password:
                  type: string
              required:
                - token
                - password
              example:
                password: user5678
                token: reset-token
      responses:
        '200':
          description: Success response
          content:
            application/json: {}
  /auth/reset-old-password:
    put:
      tags:
        - Auth
      security:
        - userAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                password:
                  type: string
              required:
                - oldPassword
                - password
              example:
                oldPassword: user1234
                password: user5678
      responses:
        '200':
          description: Success response
          content:
            application/json: {}
  /auth/refresh-tokens:
    post:
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  format: token
              required:
                - token
              example:
                token: refresh-token
      responses:
        '200':
          description: Access & Refresh Token Objects
          content:
            application/json: {}
  /auth/logout:
    post:
      tags:
        - Auth
      security:
        - userAuth: []
      responses:
        '200':
          description: Success response
          content:
            application/json: {}
  /users/profile:
    post:
      tags:
        - Users
      security:
        - userAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                nickName:
                  type: string
                profileImage:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
                mobile:
                  type: number
                gender:
                  type: string
                  enum: [male, female, other]
                required:
                  - fullName
                  - nickName
                  - profileImage
                  - dateOfBirth
                  - mobile
                  - gender
              example:
                fullName: Steve Rogers
                nickName: Steve
                profileImage: https://picsum.photos/200
                dateOfBirth: 2002-02-08T23:28:56.782Z
                mobile: 9876543210
                gender: male
      responses:
        '200':
          description: user object
          content:
            application/json: {}
    get:
      tags:
        - Users
      security:
        - userAuth: []
      responses:
        '200':
          description: User profile object
          content:
            application/json: {}
    put:
      tags:
        - Users
      security:
        - userAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                fullName:
                  type: string
                nickName:
                  type: string
                profileImage:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
                mobile:
                  type: number
                gender:
                  type: string
                  enum: [male, female, other]
                language:
                  type: string
              example:
                fullName: Steve Rogers
                nickName: Steve
                profileImage: https://picsum.photos/200
                dateOfBirth: 2002-02-08T23:28:56.782Z
                mobile: 9876543210
                gender: male
                language: English
      responses:
        '200':
          description: updated User profile object
          content:
            application/json: {}
    delete:
      tags:
        - Users
      security:
        - userAuth: []
      responses:
        '200':
          description: empty object
          content:
            application/json: {}
  /users/toggle-notifications:
    patch:
      tags:
        - Users
      security:
        - userAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isEnabled:
                  type: boolean
              required:
                - isEnabled
              example:
                isEnabled: true
      responses:
        '200':
          description: isEnabled field
          content:
            application/json: {}
  /users/addresses:
    get:
      tags:
        - Users
      security:
        - userAuth: []
      responses:
        '200':
          description: array of all addresses for the user
          content:
            application/json: {}
    post:
      tags:
        - Users
      security:
        - userAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [home, office, other]
                street:
                  type: string
                city:
                  type: string
                landmark:
                  type: string
                state:
                  type: string
                country:
                  type: string
                postalCode:
                  type: integer
                default:
                  type: boolean
              required:
                - type
                - street
                - city
                - state
                - country
                - postalCode
              example:
                type: home
                street: A-501, Pushkar-hights, Yogi-chowk Road
                city: Surat
                landmark: Yogi-chowk ground
                state: Gujarat
                country: India
                postalCode: 395010
                default: true
      responses:
        '200':
          description: posted address object
          content:
            application/json: {}
  /users/addresses/{addressId}:
    put:
      tags:
        - Users
      security:
        - userAuth: []
      parameters:
        - name: addressId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the address
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [home, office, other]
                street:
                  type: string
                city:
                  type: string
                landmark:
                  type: string
                state:
                  type: string
                country:
                  type: string
                postalCode:
                  type: integer
                default:
                  type: boolean
              example:
                type: home
                street: 208, Yogi-Heights, Savaliya Circle, Yogi-Chowk Road
                landmark: Yogi-chowk ground
                postalCode: 395006
      responses:
        '200':
          description: updated address object
          content:
            application/json: {}
    delete:
      tags:
        - Users
      security:
        - userAuth: []
      parameters:
        - name: addressId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the address
      responses:
        '200':
          description: empty object
          content:
            application/json: {}
  /home:
    get:
      tags:
        - Root
      security:
        - userAuth: []
      responses:
        '200':
          description: arrays of offers, categories & products
          content:
            application/json: {}
  /upload:
    post:
      tags:
        - Root
      security:
        - userAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [user]
                file:
                  type: string
                  format: binary
              required:
                - type
                - file
              example:
                type: user
      responses:
        '200':
          description: signed url of uploaded file
          content:
            application/json: {}
  /notifications:
    get:
      tags:
        - Notifications
      security:
        - userAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: page number for notifications
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 20
          description: number of notifications per page
      responses:
        '200':
          description: notifications array
          content:
            application/json: {}
    delete:
      tags:
        - Notifications
      security:
        - userAuth: []
      responses:
        '200':
          description: empty object
          content:
            application/json: {}
  /notifications/{notificationId}:
    delete:
      tags:
        - Notifications
      security:
        - userAuth: []
      parameters:
        - name: notificationId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the notification
      responses:
        '200':
          description: full notification object
          content:
            application/json: {}
  /offers:
    get:
      tags:
        - Offers
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: page number for offers
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 10
          description: number of offers per page
      responses:
        '200':
          description: offers array
          content:
            application/json: {}
  /categories:
    get:
      tags:
        - Categories
      responses:
        '200':
          description: categories array
          content:
            application/json: {}
  /products:
    get:
      tags:
        - Products
      security:
        - userAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: page number for products
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 10
          description: number of products per page
      responses:
        '200':
          description: products array
          content:
            application/json: {}
  /products/category/{categoryId}:
    get:
      tags:
        - Products
      security:
        - userAuth: []
      parameters:
        - name: categoryId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the category
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: page number for products
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 10
          description: number of products per page
      responses:
        '200':
          description: category wise products array
          content:
            application/json: {}
  /products/search:
    post:
      tags:
        - Products
      security:
        - userAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                keyword:
                  type: string
                category:
                  type: string
                  format: objectId
                min_price:
                  type: number
                max_price:
                  type: number
                sortBy:
                  type: string
                  enum: [popular, recent, price_desc, price_asc]
                rating:
                  type: integer
                  minimum: 1
                page:
                  type: integer
                  minimum: 1
                limit:
                  type: integer
                  minimum: 1
              example:
                keyword: with
                min_price: 100
                max_price: 90000
                sortBy: price_desc
                rating: 3
                page: 1
                limit: 10
      responses:
        '200':
          description: products array for search results
          content:
            application/json: {}
  /products/{productId}:
    get:
      tags:
        - Products
      security:
        - userAuth: []
      parameters:
        - name: productId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the product
      responses:
        '200':
          description: full product object
          content:
            application/json: {}
  /products/toggle-like/{productId}:
    patch:
      tags:
        - Products
      security:
        - userAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isLiked:
                  type: boolean
              required:
                - isLiked
              example:
                isLiked: true
      parameters:
        - name: productId
          in: path
          schema:
            type: string
            format: objectId
          required: true
      responses:
        '200':
          description: isLiked field
          content:
            application/json: {}
  /products/wishlist:
    get:
      tags:
        - Products
      security:
        - userAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: page number for products
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 10
          description: number of products per page
      responses:
        '200':
          description: wishlist products array
          content:
            application/json: {}
  /products/wishlist/category/{categoryId}:
    get:
      tags:
        - Products
      security:
        - userAuth: []
      parameters:
        - name: categoryId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the category
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: page number for products
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 10
          description: number of products per page
      responses:
        '200':
          description: category wise wishlist products array
          content:
            application/json: {}
  /products/wishlist/search:
    post:
      tags:
        - Products
      security:
        - userAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                keyword:
                  type: string
                category:
                  type: string
                  format: objectId
                min_price:
                  type: number
                max_price:
                  type: number
                sortBy:
                  type: string
                  enum: [popular, recent, price_desc, price_asc]
                rating:
                  type: integer
                  minimum: 1
                page:
                  type: integer
                  minimum: 1
                limit:
                  type: integer
                  minimum: 1
              example:
                keyword: with
                min_price: 100
                max_price: 90000
                sortBy: price_desc
                rating: 3
                page: 1
                limit: 10
      responses:
        '200':
          description: wishlist products array for search results
          content:
            application/json: {}
  /products/cart/toggle-cart:
    put:
      tags:
        - Products
      security:
        - userAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string,
                  format: objectId
                variantId:
                  type: string,
                  format: objectId
                action:
                  type: string
                  enum: [add, remove, increase, decrease]
                variant:
                  type: string
                  format: objectId
                quantity:
                  type: integer
              required:
                - productId
                - variantId
                - action
              example:
                productId: 6613c70e5190bb0bebc88616
                variantId: 6613c70e5190bb0bebc88619
                action: add
                quantity: 1
      responses:
        '200':
          description: action field
          content:
            application/json: {}
  /products/cart:
    get:
      tags:
        - Products
      security:
        - userAuth: []
      responses:
        '200':
          description: cart products array
          content:
            application/json: {}
  /products/reviews/{productId}:
    get:
      tags:
        - Reviews
      security:
        - userAuth: []
      parameters:
        - name: productId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the product
        - name: rating
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 5
          description: rating stars of review
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: page number for reviews
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 15
          description: number of reviews per page
      responses:
        '200':
          description: reviews array
          content:
            application/json: {}
    post:
      tags:
        - Reviews
      security:
        - userAuth: []
      parameters:
        - name: productId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the product
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                star:
                  type: integer
                  minimum: 1
                  maximum: 5
              required:
                - message
                - star
              example:
                message: excellent! good quality as compared to price
                star: 5
      responses:
        '200':
          description: posted review object
          content:
            application/json: {}
  /reviews/{reviewId}:
    put:
      tags:
        - Reviews
      security:
        - userAuth: []
      parameters:
        - name: reviewId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the review
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                star:
                  type: integer
                  minimum: 1
                  maximum: 5
              example:
                message: not so good! pretty average quality
                star: 3
      responses:
        '200':
          description: updated review object
          content:
            application/json: {}
    delete:
      tags:
        - Reviews
      security:
        - userAuth: []
      parameters:
        - name: reviewId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the review
      responses:
        '200':
          description: empty object
          content:
            application/json: {}
  /reviews/toggle-like/{reviewId}:
    patch:
      tags:
        - Reviews
      security:
        - userAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isLiked:
                  type: boolean
              required:
                - isLiked
              example:
                isLiked: true
      parameters:
        - name: reviewId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the review
      responses:
        '200':
          description: isLiked field
          content:
            application/json: {}
  /checkout/shipping-types:
    get:
      tags:
        - Checkout
      responses:
        '200':
          description: shipping-types array
          content:
            application/json: {}
  /checkout/promo-codes:
    get:
      tags:
        - Checkout
      responses:
        '200':
          description: promo-codes array
          content:
            application/json: {}
  /checkout:
    post:
      tags:
        - Checkout
      security:
        - userAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                  format: objectId
                shipping:
                  type: string
                  format: objectId
                promo:
                  type: string
                  format: objectId
                amount:
                  type: number
              required:
                - address
                - shipping
                - amount
              example:
                address: 1234567890abcdef12345678
                shipping: 1234567890abcdef12345678
                promo: 1234567890abcdef12345678
                amount: 945015
      responses:
        '200':
          description: empty object
          content:
            application/json: {}
  /orders/{type}:
    get:
      tags:
        - Orders
      security:
        - userAuth: []
      parameters:
        - name: type
          in: path
          schema:
            type: string
            enum: [ongoing, completed]
          required: true
          description: type or status of orders
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: page number for orders
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 10
          description: number of orders per page
      responses:
        '200':
          description: orders array
          content:
            application/json: {}
  /orders/track/{orderId}:
    get:
      tags:
        - Orders
      parameters:
        - name: orderId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the order
      security:
        - userAuth: []
      responses:
        '200':
          description: order object
          content:
            application/json: {}
  /orders/cancel/{orderId}:
    put:
      tags:
        - Orders
      security:
        - userAuth: []
      parameters:
        - name: orderId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the order
      responses:
        '200':
          description: canceled order object
          content:
            application/json: {}
  /faqs:
    get:
      tags:
        - FAQs
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: page number for faqs
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 10
          description: number of faqs per page
      responses:
        '200':
          description: faqs array
          content:
            application/json: {}
  /messages:
    post:
      tags:
        - Messages
      security:
        - userAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                title:
                  type: string
                description:
                  type: string
              required:
                - email
                - title
                - description
              example:
                email: user1@gmail.com
                title: Promo code is not working
                description: When I click on the apply promo code button, it shows promo code expired
      responses:
        '200':
          description: created message object
          content:
            application/json: {}
  /admin/upload:
    post:
      tags:
        - Admin Root
      security:
        - adminAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [category, product, offer, user]
                file:
                  type: string
                  format: binary
              required:
                - type
                - file
              example:
                type: product
      responses:
        '200':
          description: signed url of uploaded file
          content:
            application/json: {}
  /admin/users:
    get:
      tags:
        - Admin Users
      security:
        - adminAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: page number for users
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 10
          description: number of users per page
      responses:
        '200':
          description: users array
          content:
            application/json: {}
  /admin/users/{userId}:
    get:
      tags:
        - Admin Users
      security:
        - adminAuth: []
      parameters:
        - name: userId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the user
      responses:
        '200':
          description: user object
          content:
            application/json: {}
    put:
      tags:
        - Admin Users
      security:
        - adminAuth: []
      parameters:
        - name: userId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                fullName:
                  type: string
                nickName:
                  type: string
                profileImage:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
                mobile:
                  type: number
                  format: mobile
                gender:
                  type: string
                  enum: [male, female, other]
                language:
                  type: string
                role:
                  type: string
                  enum: [user, admin]
              example:
                fullName: David Malan
                nickName: David
                profileImage: https://picsum.photos/200
                mobile: 9977553311
      responses:
        '200':
          description: updated user object
          content:
            application/json: {}
    delete:
      tags:
        - Admin Users
      security:
        - adminAuth: []
      parameters:
        - name: userId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the user
      responses:
        '200':
          description: deleted user object
          content:
            application/json: {}
  /admin/categories:
    get:
      tags:
        - Admin Categories
      security:
        - adminAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: page number for categories
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 8
          description: number of categories per page
      responses:
        '200':
          description: categories array
          content:
            application/json: {}
    post:
      tags:
        - Admin Categories
      security:
        - adminAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                icon:
                  type: string
                description:
                  type: string
              required:
                - name
                - icon
              example:
                name: Clothes
                icon: icon8.svg
                description: All variety of clothes with different brands for men, women & children
      responses:
        '200':
          description: posted category object
          content:
            application/json: {}
  /admin/categories/{categoryId}:
    put:
      tags:
        - Admin Categories
      security:
        - adminAuth: []
      parameters:
        - name: categoryId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the category
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                icon:
                  type: string
                description:
                  type: stirng
              example:
                name: Electronics
                description: A to Z Electronics products with many brands & choices
      responses:
        '200':
          description: updated category object
          content:
            application/json: {}
    delete:
      tags:
        - Admin Categories
      security:
        - adminAuth: []
      parameters:
        - name: categoryId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the category
      responses:
        '200':
          description: deleted category object
          content:
            application/json: {}
  /admin/products:
    post:
      tags:
        - Admin Products
      security:
        - adminAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                image:
                  type: string
                description:
                  type: string
                category:
                  type: string
                  format: objectId
                price:
                  type: number
                quantity:
                  type: integer
                defaultVariant:
                  type: object
                  properties:
                    name:
                      type: string
                    size:
                      type: string | integer
                    color:
                      type: string
                    price:
                      type: number
                    quantity:
                      type: integer
              required:
                - name
                - image
                - category
                - price
                - quantity
              example:
                name: MacBook M1
                category: 6540c438f028c16ad2ba11f2
                image: https://picsum.photos/400
                description: Latest Apple MacBook | with Apple Silicon cheap | Apple M1 chip | fast speed & fast optimization
                price: 84000
                quantity: 200
                defaultVariant:
                  name: M1 Space Grey
                  size: 13
                  price: 84000
                  color: Space Grey
                  quantity: 80
      responses:
        '200':
          description: posted product object
          content:
            application/json: {}
  /admin/products/{productId}:
    put:
      tags:
        - Admin Products
      security:
        - adminAuth: []
      parameters:
        - name: productId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the product
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                image:
                  type: string
                description:
                  type: string
                category:
                  type: string
                  format: objectId
                price:
                  type: number
                quantity:
                  type: integer
                defaultVariant:
                  type: object
              example:
                name: Apple MacBook M1
                price: 83000
                quantity: 250
      responses:
        '200':
          description: updated product object
          content:
            application/json: {}
    delete:
      tags:
        - Admin Products
      security:
        - adminAuth: []
      parameters:
        - name: productId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the product
      responses:
        '200':
          description: deleted product object
          content:
            application/json: {}
  /admin/products/variants/{productId}:
    get:
      tags:
        - Admin Variants
      security:
        - adminAuth: []
      parameters:
        - name: productId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the product
      responses:
        '200':
          description: product variants array
          content:
            application/json: {}
    post:
      tags:
        - Admin Variants
      security:
        - adminAuth: []
      parameters:
        - name: productId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the product
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                size:
                  type: string | integer
                color:
                  type: string
                price:
                  type: number
                quantity:
                  type: integer
              required:
                - price
                - quantity
              example:
                name: M1 Gold
                color: Gold
                price: 82000
                quantity: 70
      responses:
        '200':
          description: posted variant object
          content:
            application/json: {}
  /admin/variants/{variantId}:
    put:
      tags:
        - Admin Variants
      security:
        - adminAuth: []
      parameters:
        - name: variantId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the variant
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                size:
                  type: string | integer
                color:
                  type: string
                price:
                  type: number
                quantity:
                  type: integer
              example:
                name: M1 Shining Black
                color: Black
      responses:
        '200':
          description: updated variant object
          content:
            application/json: {}
    delete:
      tags:
        - Admin Variants
      security:
        - adminAuth: []
      parameters:
        - name: variantId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the variant
      responses:
        '200':
          description: deleted variant object
          content:
            application/json: {}
  /admin/reviews/{reviewId}:
    delete:
      tags:
        - Admin Reviews
      security:
        - adminAuth: []
      parameters:
        - name: reviewId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the review
      responses:
        '200':
          description: review object
          content:
            application/json: {}
  /admin/offers/{productId}:
    get:
      tags:
        - Admin Offers
      security:
        - adminAuth: []
      parameters:
        - name: productId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId of the product for getting its reviews
      responses:
        '200':
          description: offers array
          content:
            application/json: {}
    put:
      tags:
        - Admin Offers
      security:
        - adminAuth: []
      parameters:
        - name: offerId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the offer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product:
                  type: string
                  format: objectId
                image:
                  type: string
                discountPercentage:
                  type: number
                  maximum: 90
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
              example:
                discountPercentage: 15
                endDate: 2024-01-14T12:05:23.235Z
      responses:
        '200':
          description: updated offer object
          content:
            application/json: {}
    delete:
      tags:
        - Admin Offers
      security:
        - adminAuth: []
      parameters:
        - name: offerId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the offer
      responses:
        '200':
          description: deleted offer object
          content:
            application/json: {}
  /admin/offers:
    post:
      tags:
        - Admin Offers
      security:
        - adminAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product:
                  type: string
                  format: objectId
                image:
                  type: string
                discountPercentage:
                  type: number
                  maximum: 90
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
              required:
                - product
                - image
                - discountPercentage
                - endDate
              example:
                product: 6540d10abb523421b2fcb9a8
                image: https://picsum.photos/400/200
                discountPercentage: 10
                startDate: '2023-10-31T11:42:22.572Z'
                endDate: '2023-12-31T11:42:22.572Z'
      responses:
        '200':
          description: posted offer object
          content:
            application/json: {}
  /admin/shipping:
    get:
      tags:
        - Admin Shipping
      security:
        - adminAuth: []
      responses:
        '200':
          description: shipping-type array
          content:
            application/json: {}
    post:
      tags:
        - Admin Shipping
      security:
        - adminAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                charge:
                  type: number
              required:
                - title
                - charge
              example:
                title: Express
                description: Estimated Arrival, In 2-3 days
                charge: 30
      responses:
        '200':
          description: posted shipping-type object
          content:
            application/json: {}
  /admin/shipping/{shippingId}:
    put:
      tags:
        - Admin Shipping
      security:
        - adminAuth: []
      parameters:
        - name: shippingId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the shipping-type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                charge:
                  type: number
              example:
                description: Estimated Arrival, In 1-3 days
                charge: 25
      responses:
        '200':
          description: updated shipping-type object
          content:
            application/json: {}
    delete:
      tags:
        - Admin Shipping
      security:
        - adminAuth: []
      parameters:
        - name: shippingId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the shipping-type
      responses:
        '200':
          description: deleted shipping-type object
          content:
            application/json: {}
  /admin/promo:
    get:
      tags:
        - Admin Promotions
      security:
        - adminAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: page number for promo-code
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 10
          description: number of promo-codes per page
      responses:
        '200':
          description: promo-codes array
          content:
            application/json: {}
    post:
      tags:
        - Admin Promotions
      security:
        - adminAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                discountPercentage:
                  type: number
                  maximum: 90
                maxUses:
                  type: integer
                validFrom:
                  type: string
                  format: date
                validUntil:
                  type: string
                  format: date
              required:
                - title
                - discountPercentage
                - maxUses
                - validUntil
              example:
                title: Special20
                description: Flat 20% off for 7 days!
                discountPercentage: 20
                maxUses: 50
                validFrom: 2023-10-31T15:58:16.396Z
                validUntil: 2023-12-31T15:58:16.396Z
      responses:
        '200':
          description: posted promo-code object
          content:
            application/json: {}
  /admin/promo/{promoId}:
    put:
      tags:
        - Admin Promotions
      security:
        - adminAuth: []
      parameters:
        - name: promoId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the promo-code
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                discountPercentage:
                  type: number
                  maximum: 90
                maxUses:
                  type: integer
                remainingUses:
                  type: integer
                validFrom:
                  type: string
                  format: date
                validUntil:
                  type: string
                  format: date
              example:
                title: Flat20
                description: Flat 20% off for 3 days!
                maxUses: 100
                validUntil: 2023-12-25T15:58:16.396Z
      responses:
        '200':
          description: updated promo-code object
          content:
            application/json: {}
    delete:
      tags:
        - Admin Promotions
      security:
        - adminAuth: []
      parameters:
        - name: promoId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the promo-code
      responses:
        '200':
          description: deleted promo-code object
          content:
            application/json: {}
  /admin/orders:
    get:
      tags:
        - Admin Orders
      security:
        - adminAuth: []
      parameters:
        - name: type
          in: query
          schema:
            status: string
            enum: [Ordered, Shipped, Out for Delivery, Delivered, Canceled]
          required: true
          description: status of orders
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: page number for orders
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 10
          description: number of orders per page
      responses:
        '200':
          description: orders array
          content:
            application/json: {}
  /admin/orders/{orderId}:
    get:
      tags:
        - Admin Orders
      security:
        - adminAuth: []
      parameters:
        - name: orderId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the order
      responses:
        '200':
          description: order object
          content:
            application/json: {}
    put:
      tags:
        - Admin Orders
      security:
        - adminAuth: []
      parameters:
        - name: orderId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the order
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: object
                  properties:
                    title:
                      status: string
                      enum:
                        [
                          Ordered,
                          Shipped,
                          Out for Delivery,
                          Delivered,
                          Canceled,
                        ]
                    description:
                      type: string
                    isForwardDirection:
                      type: boolean
              example:
                status:
                  title: Shipped
                  description: Order Shipped successfully
      responses:
        '200':
          description: empty object
          content:
            application/json: {}
  /admin/faqs:
    get:
      tags:
        - Admin FAQs
      security:
        - adminAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: page number for faqs
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 10
          description: number of faqs per page
      responses:
        '200':
          description: faqs array
          content:
            application/json: {}
    post:
      tags:
        - Admin FAQs
      security:
        - adminAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
              required:
                - title
                - description
              example:
                title: What is Evira?
                description: Evira is an e-commerce platform, here you find products with lot of categories & with different variants
      responses:
        '200':
          description: created FAQ object
          content:
            application/json: {}
  /admin/faqs/{faqId}:
    put:
      tags:
        - Admin FAQs
      security:
        - adminAuth: []
      parameters:
        - name: faqId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the FAQ
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
              example:
                title: What is Evira?
                description: Evira is an online mart application, here you find products with lot of categories & with different variants
      responses:
        '200':
          description: updated FAQ object
          content:
            application/json: {}
    delete:
      tags:
        - Admin FAQs
      security:
        - adminAuth: []
      parameters:
        - name: faqId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the FAQ
      responses:
        '200':
          description: deleted FAQ object
          content:
            application/json: {}
  /admin/messages:
    get:
      tags:
        - Admin Messages
      security:
        - adminAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: page number for messages
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 10
          description: number of messages per page
      responses:
        '200':
          description: messages array
          content:
            application/json: {}
  /admin/messages/{messageId}:
    delete:
      tags:
        - Admin Messages
      security:
        - adminAuth: []
      parameters:
        - name: messageId
          in: path
          schema:
            type: string
            format: objectId
          required: true
          description: objectId for the message
      responses:
        '200':
          description: deleted message object
          content:
            application/json: {}
